library(ggplot2)
data <- read.csv("data.csv")
suppressPackageStartupMessages(library(caTools))
unpaid_recipe <- recipe(Type ~
Lifetime_Post_Total_Reach + Total_Interactions,
data = train_set_unpaid) %>%
step_scale(all_predictors()) %>%
step_center(all_predictors())
# author: Enoch Cheung
# date: 2023-04-08
# doc <- "
# Take valset and trainset variables and start building model. (i) Pre-tuned (ii)
# Usage:
#   R/06_knn--input_dir=<input_dir> --out_dir=<out_dir>
# Options:
# --input_dir=<input_dir>     train/val data
# --out_dir=<out_dir>         data dir
# "
#libraries
library(readr)
library(docopt)
library(dplyr)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(kknn)
library(repr)
library(cowplot)
library(tidyverse)
library(tidymodels)
library(caTools)
main <- function() {
train_set_unpaid <- readRDS("data/train_set_unpaid.rds")
val_set_unpaid <- readRDS("data/val_set_unpaid.rds")
knn_spec <- nearest_neighbor(weight_func = "rectangular", neighbors = 3) %>%
set_engine("kknn") %>%
set_mode("classification")
unpaid_recipe <- recipe(Type ~
Lifetime_Post_Total_Reach + Total_Interactions,
data = train_set_unpaid) %>%
step_scale(all_predictors()) %>%
step_center(all_predictors())
unpaid_fit <- workflow() %>%
add_recipe(unpaid_recipe) %>%
add_model(knn_spec) %>%
fit(data = train_set_unpaid)
unpaid_val_predicted <- predict(unpaid_fit, val_set_unpaid) %>%
bind_cols(val_set_unpaid)
unpaid_prediction_accuracy <- unpaid_val_predicted %>%
metrics(truth = Type, estimate = .pred_class)
unpaid_val_predicted %>%
conf_mat(truth = Type, estimate = .pred_class)
print("06_run")
# #Save table with prediction accuracy
# png(
#     file="/results/04_unpaid_prediction_accuracy.png",
#     width=8
#     height=4
# )
# print("saved knn table accuracy")
#save variable
saveRDS(unpaid_prediction_accuracy,  file = paste0("data/unpaid_prediction_accuracy.rds"))
print("saved accuracy as variable")
}
main()
train_set_unpaid <- readRDS("data/train_set_unpaid.rds")
val_set_unpaid <- readRDS("data/val_set_unpaid.rds")
print(train_set_unpaid)
url = https://raw.githubusercontent.com/calamari99/dsci-310-group-12-dreamteam/main/data/dataset_Facebook.csv
url = "https://raw.githubusercontent.com/calamari99/dsci-310-group-12-dreamteam/main/data/dataset_Facebook.csv"
facebook <<- read_csv2(url)
cols <- c("Type", "Category", "Post Month", "Paid", "Post Weekday", "Post Hour")  #set cols to change to categorical %>%
facebook[cols] <<- lapply(facebook[cols], as.factor)
View(facebook)
facebook <- read_csv2(url) %>%
#set cols to change to categorical %>%
facebook[cols] <- lapply(facebook[cols], as.factor)
url = "https://raw.githubusercontent.com/calamari99/dsci-310-group-12-dreamteam/main/data/dataset_Facebook.csv"
cols <- c("Type", "Category", "Post Month", "Paid", "Post Weekday", "Post Hour")
facebook <- read_csv2(url)
facebook[cols] <- lapply(facebook[cols], as.factor)
name_temp <<- facebook
name_temp_vec <<- gsub(" ", "_", colnames(facebook))
colnames(facebook) <<- name_temp_vec
url = "https://raw.githubusercontent.com/calamari99/dsci-310-group-12-dreamteam/main/data/dataset_Facebook.csv"
cols <- c("Type", "Category", "Post Month", "Paid", "Post Weekday", "Post Hour")
facebook <- read_csv2(url)
facebook[cols] <- lapply(facebook[cols], as.factor)
name_temp <- facebook
name_temp_vec <- gsub(" ", "_", colnames(facebook))
colnames(facebook) <- name_temp_vec
print(facebook)
View(facebook)
View(train_set_unpaid)
unpaid_prediction_accuracy <- readRDS("~/git/ubc/dsci310/dsci-310-group-12-dreamteam/data/unpaid_prediction_accuracy.rds")
View(unpaid_prediction_accuracy)
facebook_clean_unpaid <<- read_delim("data/facebook_clean.csv")
View(train_set_unpaid)
View(facebook_clean_unpaid)
cd notebooks
library(roxygen2)
library(devtools)
vignette("rd")
#' Split a data set into training and test set given a ratio
#'
#' `split` returns the split of a data set for training validation sets
#'  Refer to sample.split documentation for more details.
#'
#'
library(dplyr)
library(ggplot2)
split <- function(data,ratio) {
sample.split(data,ratio);
}
devtools::load_all()
library(devtools)
use_git()
3
use_git()
Initial commit
create_package("pckg")
workdir
workdir()
getSrcDirectory()
create_package("~/testpckg)
create_package("~/testpckg")
create_package("~/git/dsci310/testpkg")
create_package("~/git/ubc/dsci310/testpkg")
load_all()
use_r('split')
use_test('split')
